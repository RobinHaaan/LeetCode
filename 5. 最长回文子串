//暴力法
//最外层的循环是用子字符串的串的长度作为变量，从最长的开始遍历，不要从0开始，这样找到得第一个满足条件的子字符串就可以了，能省点时间
class Solution {
public:
    string longestPalindrome(string s) {
        string res;
        for(int len = s.size(); len > 0; len--)
        {
            for(int i = 0; (i+len) <= s.size(); i++)
            {
                bool flag = false;
                for(int j = 0; j <= len/2; j++)
                {
                    if(s[i+j] != s[i+len-j-1])
                    {
                        break;
                    }
                    if(j == (len-1)/2)
                    {
                        flag = true;
                    }
                }
                if(flag == true)
                {
                    return s.substr(i, len);
                }
            
            }
        }
        return res;
    }
};

//中心扩展法
//它的本质也是挨个遍历，找最大的，但比起暴力的优点是他以每个字符为遍历对象，由该字符串向外扩展，找到以该字符串为中心的最长的回文串。
class Solution {
public:
    string longestPalindrome(string s) {
        string ans = "";
        string temp;
        for(int i = 0; i < s.size(); i++)
        {
            temp = expandToCenter(s, i, i);
            ans = ans.size() > temp.size() ? ans : temp;
            temp = expandToCenter(s, i, i+1);
            ans = ans.size() > temp.size() ? ans : temp;
        }
        return ans;
    }
    
    string expandToCenter(string s, int left, int right)
    {
        while(left>=0 && right<s.size() && s[left] == s[right])
        {
            left--;
            right++;
        }
        return s.substr(left+1, right-1-left);
    }
};

//尾部加1，一直加到头部，如果还有进数则，在头部插入1
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int flag = 1;
        for(int i = digits.size()-1; i >= 0; i--)
        {
            int num = digits[i] + flag;
            digits[i] = num % 10;
            flag = num / 10;
        }
        
        if(flag == 1)
        {
            vector<int>::iterator it = digits.begin();
            digits.insert(it, 1);
        }
        return digits;
    }
};

//因为只+1，所以只有当是9的时候才进行进位处理
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int n=digits.size();
        for(int i=n-1;i>=0;i--)
        {
            if(digits[i]==9)   
                digits[i]=0; //+1（得到进位）时，如果该位为9，则变为0并向前进位
            else
            {
                digits[i]++;               //得到进位，如果该位不是9，则+1，并return
                return digits;
            }     
        }
        
        digits[0]=1;
        digits.push_back(0);      //如果遇到所有位都是9，则最后将第一位变成1，末尾加0
        //vector中只有末尾加数的push_back(),没法直接头部插数
        //push_back(val)将一个新的元素加到vector的最后面，位置为当前最后一个元素的下一个元素，
        //新的元素的值是val的拷贝（或者是移动拷贝，即&val）
        return digits;
    }
};

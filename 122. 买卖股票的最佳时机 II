//使用峰值和谷底，计算多次峰值与谷底的差值
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty())
        {
            return 0;
        }
        
        int max = 0;
        int valley = prices[0];
        int peak = prices[0];
        int i = 0;
        while(i < prices.size() - 1)
        {
            while(i < prices.size()-1 && prices[i] >= prices[i+1])
            {
                i++;
            }
            valley = prices[i];
            while(i < prices.size()-1 && prices[i] <= prices[i+1])
            {
                i++;
            }
            peak = prices[i];
            max += peak - valley;
        }
        return max;
    }
};

//因为当天可以买入，也可以卖出，所以只要今天的比昨天大就可以将差值算入最大利润
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int max = 0;
        for(int i = 1; i <prices.size(); i++)
        {
            if(prices[i] > prices[i-1])
            {
                max += prices[i] - prices[i-1];
            }
        }
        return max;
    }
};

//二分查找
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;
        int mid = 0;
        
        while(low < high)
        {
            mid = (high - low) / 2 + low;
            if(nums[mid] > target)
            {
                high = mid - 1;
            }
            else if(nums[mid] < target)
            {
                low = mid + 1;
            }
            else
            {
                return mid;
            }
        }
        
        if(target <= nums[low])
        {
            return low;
        }
        return low+1;
    }
};


//遍历
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] >= target)
            {
                return i;
            }
        }
        return nums.size();
    }
};
